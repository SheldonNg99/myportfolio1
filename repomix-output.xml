This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
public/
  vite.svg
src/
  assets/
    react.svg
  components/
    3d/
      Ocean.tsx
      Shark.tsx
    PortfolioContent.tsx
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.gitignore
eslint.config.js
index.html
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/components/3d/Ocean.tsx">
// src/components/3d/Ocean.tsx
import { Canvas, useFrame, useThree } from '@react-three/fiber'
import { Suspense, useRef } from 'react'
import { Environment } from '@react-three/drei'
import * as THREE from 'three'

interface OceanProps {
  children?: React.ReactNode
  followTarget?: React.RefObject<THREE.Object3D> // optional for tracking shark
}

// Optional camera follow component
function FollowCamera({ target }: { target?: React.RefObject<THREE.Object3D> }) {
  const { camera } = useThree()
  const basePos = useRef(new THREE.Vector3(0, 1, 10)) // default camera pos

  useFrame(() => {
    if (target?.current) {
      // Subtle tracking
      const sharkPos = target.current.position
      const targetCamPos = basePos.current.clone()
      targetCamPos.x += sharkPos.x * 0.05
      targetCamPos.y += sharkPos.y * 0.02
      camera.position.lerp(targetCamPos, 0.02)
      camera.lookAt(0, 0, 0)
    } else {
      // Always look toward center if no target
      camera.lookAt(0, 0, 0)
    }
  })

  return null
}

export default function Ocean({ children, followTarget }: OceanProps) {
  return (
    <div className="fixed top-0 left-0 w-screen h-screen m-0 p-0">
      <Canvas
        camera={{
          position: [0, 1, 10], // slightly elevated view
          fov: 60,
          near: 0.1,
          far: 1000
        }}
        className="w-screen h-screen m-0 p-0 block"
        style={{
          background:
            'linear-gradient(to bottom, #87CEEB 0%, #4682B4 50%, #191970 100%)'
        }}
      >
        <Suspense fallback={null}>
          {/* Lighting */}
          <ambientLight intensity={0.4} />
          <directionalLight position={[10, 10, 5]} intensity={1} />
          <pointLight position={[-10, -10, -10]} intensity={0.3} />

          {/* Realistic environment reflections */}
          <Environment preset="sunset" />

          {/* Optional smooth follow camera */}
          <FollowCamera target={followTarget} />

          {/* Scene objects (e.g., Shark) */}
          {children}
        </Suspense>
      </Canvas>
    </div>
  )
}
</file>

<file path="src/components/3d/Shark.tsx">
import { useRef, useEffect, useState } from 'react'
import { useFrame } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import * as THREE from 'three'

export default function Shark() {
  const sharkRef = useRef<THREE.Group>(null)
  const velocity = useRef(new THREE.Vector3(0.05, 0, 0)) // initial forward speed
  const targetDirection = useRef(new THREE.Vector3(-1, 0, 0))
  const turning = useRef(false)
  const [isMobile, setIsMobile] = useState(false)

  // Temp objects to avoid allocations
  const tmpMatrix = useRef(new THREE.Matrix4())
  const tmpEuler = useRef(new THREE.Euler(0, 0, 0, 'YXZ'))
  const finalQuat = useRef(new THREE.Quaternion())
  const currentEuler = useRef(new THREE.Euler(0, 0, 0, 'YXZ'))
  const upVec = useRef(new THREE.Vector3(0, 1, 0))

  const { scene, animations } = useGLTF('/models/shark.glb')
  const { actions } = useAnimations(animations, sharkRef)

  useEffect(() => {
    setIsMobile(window.innerWidth < 768)
    const onResize = () => setIsMobile(window.innerWidth < 768)
    window.addEventListener('resize', onResize)
    return () => window.removeEventListener('resize', onResize)
  }, [])

  // Play swim animation
  useEffect(() => {
    if (actions) {
      const swim =
        actions['Swim'] || Object.values(actions)[0]
      swim?.reset().play()
    }
  }, [actions])

  // Bounds for keeping shark visible
  const SAFE_BOUNDS = { x: 20, y: 8, z: 22 }
  const RETURN_CENTER = new THREE.Vector3(0, 0, -4) // center of swim area

  useEffect(() => {
  if (sharkRef.current) {
    const startPos = new THREE.Vector3(
      SAFE_BOUNDS.x + 5, // start outside screen to the right
      0,
      -4
    )
    sharkRef.current.position.copy(startPos)

    // Set velocity toward the center
    const dirToCenter = RETURN_CENTER.clone().sub(startPos).normalize()
    velocity.current.copy(dirToCenter.multiplyScalar(0.05))

    // Face toward center
    sharkRef.current.lookAt(RETURN_CENTER)
  }
}, [])

  useFrame((state) => {
    if (!sharkRef.current) return

    const pos = sharkRef.current.position
    const t = state.clock.getElapsedTime()

    // Check if shark is out of bounds
    if (
      !turning.current &&
      (Math.abs(pos.x) > SAFE_BOUNDS.x ||
        Math.abs(pos.y) > SAFE_BOUNDS.y ||
        Math.abs(pos.z) > SAFE_BOUNDS.z)
    ) {
      turning.current = true

      // Strong comeback bias toward center
      const dirToCenter = RETURN_CENTER.clone().sub(pos).normalize()

      // Reduce vertical influence to prevent rocket movement
      dirToCenter.y *= 0.3

      // Add subtle randomness for realism
      dirToCenter.x += (Math.random() - 0.5) * 0.2
      dirToCenter.z += (Math.random() - 0.5) * 0.2

      targetDirection.current.copy(dirToCenter.normalize())
    }

    // Smooth turning toward target direction
    if (turning.current) {
      velocity.current.lerp(
        targetDirection.current.clone().multiplyScalar(0.05),
        0.02
      )

      // Stop turning when mostly aligned with target
      if (
        velocity.current.clone().normalize().dot(targetDirection.current) > 0.99
      ) {
        turning.current = false
      }
    }

    // Update position
    pos.add(velocity.current)

    // Gentle horizontal-biased bobbing (small vertical movement only)
    pos.y += Math.sin(t * 1.5) * 0.01

    // ==== FIX: Prevent flipping ====
    if (velocity.current.lengthSq() > 0.0001) {
      const lookTarget = pos
        .clone()
        .add(velocity.current.clone().normalize().multiplyScalar(5))

      // Build lookAt matrix
      tmpMatrix.current.lookAt(pos, lookTarget, upVec.current)

      // Convert to Euler
      tmpEuler.current.setFromRotationMatrix(tmpMatrix.current, 'YXZ')

      // Limit pitch (X) to ±20°
      const maxPitch = THREE.MathUtils.degToRad(20)
      tmpEuler.current.x = THREE.MathUtils.clamp(
        tmpEuler.current.x,
        -maxPitch,
        maxPitch
      )

      // Always keep roll (Z) at 0 here, banking applied separately
      tmpEuler.current.z = 0

      // Create quaternion and slerp to it
      finalQuat.current.setFromEuler(tmpEuler.current)
      sharkRef.current.quaternion.slerp(finalQuat.current, 0.1)

      // Apply subtle banking after orientation
      const bank = -velocity.current.x * 2
      currentEuler.current.setFromQuaternion(sharkRef.current.quaternion, 'YXZ')
      currentEuler.current.z = THREE.MathUtils.lerp(
        currentEuler.current.z,
        bank,
        0.1
      )
      sharkRef.current.quaternion.setFromEuler(currentEuler.current)
    }
  })

  return (
    <group ref={sharkRef} scale={2} position={[0, 0, -2]}>
      <group rotation={[0, Math.PI, 0]}>
        <primitive object={scene} />
      </group>
    </group>
  )
}

useGLTF.preload('/models/shark.glb')
</file>

<file path="src/components/PortfolioContent.tsx">
// src/components/PortfolioContent.tsx
import { useEffect, useState } from 'react'

export default function PortfolioContent() {
  const [isMobile, setIsMobile] = useState(false)

  useEffect(() => {
    const check = () => setIsMobile(window.innerWidth < 768)
    check()
    window.addEventListener('resize', check)
    return () => window.removeEventListener('resize', check)
  }, [])

  return (
    <div
      className="fixed top-0 left-0 w-screen h-screen text-white pointer-events-none flex items-center z-10 px-32 lg:px-16 md:px-12 sm:px-8"
      style={{
        backgroundColor: 'rgba(0, 30, 60, 0.3)',
        backdropFilter: 'blur(1px)'
      }}
    >
      <div className="pointer-events-auto max-w-4xl">
        {/* Optimized name with better hierarchy */}
        <h1 className="text-3xl md:text-5xl font-bold mb-2 drop-shadow-lg tracking-tight">
          Kai
        </h1>
        
        {/* Accurate role reflecting your experience */}
        <h2 className="text-xl md:text-2xl font-medium opacity-90 mb-3 text-blue-200">
          Full-Stack Engineer • React • Web3
        </h2>
        
        {/* Real value proposition based on your background */}
        <p className="text-base md:text-lg opacity-90 leading-relaxed mb-8 max-w-prose">
          <span className="font-semibold text-blue-200">3+ years</span> building scalable web applications 
          and ERP systems for <span className="font-semibold">Japanese and international clients</span>. 
          Specialized in React frontends, backend integration, and emerging Web3 technologies with 
          <span className="font-semibold text-blue-200"> bilingual client communication</span> capabilities.
        </p>

        {/* Real achievement highlights based on your experience */}
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-8 text-sm">
          <div className="bg-white/10 rounded-lg p-3 border border-white/20">
            <div className="font-bold text-lg text-blue-200">3+</div>
            <div className="opacity-90">Years Experience</div>
          </div>
          <div className="bg-white/10 rounded-lg p-3 border border-white/20">
            <div className="font-bold text-lg text-blue-200">Multiple</div>
            <div className="opacity-90">ERP Modules</div>
          </div>
          <div className="bg-white/10 rounded-lg p-3 border border-white/20 col-span-2 md:col-span-1">
            <div className="font-bold text-lg text-blue-200">4</div>
            <div className="opacity-90">Languages - [JP/CN/MY/EN]</div>
          </div>
        </div>

        {/* Tech stack reflecting your actual skills */}
        <div className="mb-10">
          <h3 className="text-sm font-semibold opacity-70 mb-3 uppercase tracking-wider">
            Technical Expertise
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <div className="text-xs opacity-60 mb-2">Frontend & Modern Web</div>
              <div className="flex flex-wrap gap-1">
                {['React', 'JavaScript', 'TypeScript', 'Mobile-Responsive'].map(skill => (
                  <span
                    key={skill}
                    className="px-3 py-1 bg-blue-500/20 rounded-full border border-blue-400/30 text-xs font-medium"
                  >
                    {skill}
                  </span>
                ))}
              </div>
            </div>
            <div>
              <div className="text-xs opacity-60 mb-2">Backend & Systems</div>
              <div className="flex flex-wrap gap-1">
                {['SQL', 'PHP', 'REST APIs', 'ERP Systems'].map(skill => (
                  <span
                    key={skill}
                    className="px-3 py-1 bg-green-500/20 rounded-full border border-green-400/30 text-xs font-medium"
                  >
                    {skill}
                  </span>
                ))}
              </div>
            </div>
          </div>
          
          {/* Web3 focus area */}
          <div className="mt-4">
            <div className="text-xs opacity-60 mb-2">Web3 & Emerging Tech</div>
            <div className="flex flex-wrap gap-1">
              {['Solidity', 'Smart Contracts', 'DeFi Data', 'Web3 Integration'].map(skill => (
                <span
                  key={skill}
                  className="px-3 py-1 bg-purple-500/20 rounded-full border border-purple-400/30 text-xs font-medium"
                >
                  {skill}
                </span>
              ))}
            </div>
          </div>

          {/* Industry experience */}
          <div className="mt-4">
            <div className="text-xs opacity-60 mb-2">Industry Experience</div>
            <div className="flex flex-wrap gap-1">
              {['Manufacturing', 'Healthcare', 'Retail', 'Finance'].map(industry => (
                <span
                  key={industry}
                  className="px-3 py-1 bg-yellow-500/15 rounded-full border border-yellow-400/30 text-xs font-medium"
                >
                  {industry}
                </span>
              ))}
            </div>
          </div>
        </div>

        {/* CTAs tailored to your goals */}
        <div className="flex flex-col md:flex-row gap-4">
          <button className="px-8 py-4 rounded-full border-2 border-blue-400/60 bg-blue-500/20 hover:bg-blue-500/30 hover:-translate-y-0.5 transition-all duration-300 font-medium">
            View Projects
          </button>
          <button className="px-8 py-4 rounded-full border-2 border-purple-400/60 bg-purple-500/15 hover:bg-purple-500/25 hover:-translate-y-0.5 transition-all duration-300">
            Web3 Portfolio
          </button>
          <button className="px-8 py-4 rounded-full border-2 border-green-400/40 bg-green-500/10 hover:bg-green-500/20 hover:-translate-y-0.5 transition-all duration-300">
            Contact
          </button>
        </div>

        {/* Updated availability info */}
        <div className="mt-8 text-xs opacity-60">
          🌐 Open to remote Web3/crypto roles • Multilingual: CN | EN | MY | JP
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/App.tsx">
// src/App.tsx
import Ocean from './components/3d/Ocean'
import Shark from './components/3d/Shark'
import PortfolioContent from './components/PortfolioContent'
import './App.css'

function App() {
  return (
    <div className="h-screen w-screen">
      <Ocean>
        <Shark />
      </Ocean>
      <PortfolioContent />
    </div>
  )
}

export default App
</file>

<file path="src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html, body {
  height: 100%;
  width: 100%;
  overflow: hidden;
}

#root {
  height: 100vh;
  width: 100vw;
  margin: 0;
  padding: 0;
}
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "myportfolio",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@react-three/drei": "^10.6.1",
    "@react-three/fiber": "^9.3.0",
    "framer-motion": "^12.23.12",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "three": "^0.179.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.32.0",
    "@tailwindcss/postcss": "^4.1.11",
    "@types/react": "^19.1.9",
    "@types/react-dom": "^19.1.7",
    "@vitejs/plugin-react": "^4.7.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.32.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.39.0",
    "vite": "^7.1.0"
  }
}
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
</file>

</files>
